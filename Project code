import speech_recognition as sr
import webbrowser
import pyttsx3
import musicLibrary
import requests
import logging

recognizer = sr.Recognizer()
engine = pyttsx3.init()
newsapi = "a611c17022c841cebddbd249afebfbf0"

logging.basicConfig(filename="jarvis.log", level=logging.ERROR)

def speak(text):
    engine.say(text)
    engine.runAndWait()

def processCommand(c):
    if "open google" in c.lower():
        webbrowser.open("https://www.google.com")
    elif "open facebook" in c.lower():
        webbrowser.open("https://www.facebook.com")
    elif "open youtube" in c.lower():
        webbrowser.open("https://www.youtube.com")
    elif "open linkedin" in c.lower():
        webbrowser.open("https://www.linkedin.com")
    elif c.lower().startswith("play"):
        try:
            words = c.lower().split()
            if len(words) > 1:
                song = words[1]
                link = musicLibrary.music[song]
                webbrowser.open(link)
            else:
                speak("Please specify a song to play.")
        except KeyError:
            speak(f"Song '{song}' not found in your music library.")
    elif "news" in c.lower():
        try:
            r = requests.get(f"https://newsapi.org/v2/top-headlines?country=us&apiKey={newsapi}")
            if r.status_code == 200:
                news = r.json()
                top_articles = news.get("articles", [])[:5]
                if top_articles:
                    for i, article in enumerate(top_articles):
                        title = article.get("title", "No title available")
                        speak(f"Headline {i + 1}: {title}")
                else:
                    speak("No news articles found.")
            else:
                speak("Unable to fetch news. Please try again later.")
        except Exception as e:
            logging.error(f"Error fetching news: {e}")
            speak("An error occurred while fetching news.")
    elif "exit" in c.lower() or "quit" in c.lower():
        speak("Goodbye!")
        return False
    return True

if __name__ == "__main__":
    speak("Initializing Jarvis...")
    while True:
        print("Recognizing...")
        try:
            with sr.Microphone() as source:
                print("Listening...")
                audio = recognizer.listen(source, timeout=5, phrase_time_limit=5)
            word = recognizer.recognize_google(audio)
            if word.lower() == "jarvis":
                speak("Yes!")
                with sr.Microphone() as source:
                    print("Ready to listen...")
                    audio = recognizer.listen(source)
                    command = recognizer.recognize_google(audio)
                    if not processCommand(command):
                        break
        except Exception as e:
            logging.error(f"Error: {e}")
            print("Error occurred.")
